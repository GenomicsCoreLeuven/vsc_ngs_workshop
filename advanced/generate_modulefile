#!/bin/bash

WRITE=0
ADD=""
MOD_PREFIX="/staging/leuven/stg_00019/software/modulefiles"
SOFT_PREFIX="/staging/leuven/stg_00019/software"

usage() {
	echo "Usage: $0 options"
	cat << EOFUSAGE
	
	This script generates a default module file for an installed
	software package; it needs some parameters and then searches
	for some default directories. You should check the generated
	module file, and might need to add some lines.
	
	OPTIONS:
		-h	Show this message
		-n	Full name of the software package
		-s	Name of the subdirectory in $SOFT_PREFIX
			(Full name is used if omitted)
		-v	Version of the software package
		-d	Description for the "what-is"
		-w	write file, don't ask
		-a	add lines to the module file
			(multiple instances can be used)
		-p	software prefix
			(default: $SOFT_PREFIX)
		-m	module file prefix
			(default: $MOD_PREFIX)

EOFUSAGE
}

while getopts "hn:v:d:s:wa:p:m:" OPTION
do
	case $OPTION in
		h)
			usage
			exit
			;;
		n)
			REALNAME=$OPTARG
			;;
		s)
			NAME=$OPTARG
			;;
		v)
			VERSION=$OPTARG
			;;
		d)
			DESCRIPTION=$OPTARG
			;;
		w)
			WRITE=1
			;;
		a)
			ADD="$ADD
$OPTARG"
			;;
		p)
			SOFT_PREFIX=$OPTARG
			;;
		m)
			MOD_PREFIX=$OPTARG
			;;
		?)
			usage
			exit 1
			;;
	 esac
done

if [[ ! -d "$MOD_PREFIX" ]]; then
	echo "Error: module installation directory does not exist!"
	echo "If you're sure that is the location you want it, create the directory first:"
	echo "mkdir \"$MOD_PREFIX\""
	exit 1
else
	echo "Module installation directory exists; continuing..."
fi

if [[ -z "$REALNAME" ]] || [[ -z "$VERSION" ]] || [[ -z "$DESCRIPTION" ]]; then
	usage
	exit 1
fi

if [[ -z "$NAME" ]]; then
	NAME="$REALNAME"
fi

INST_ROOT=$SOFT_PREFIX/$NAME/$VERSION
MOD_LOC=$MOD_PREFIX/$NAME/$VERSION
cat << EOFSTART

===================================================================
Generating module file with the following information:
Name:					$NAME (Real name: $REALNAME)
Version:				$VERSION
Description:				$DESCRIPTION

Software installation directory:	$INST_ROOT
Module location:			$MOD_LOC
===================================================================

EOFSTART

if [[ ! -d "$INST_ROOT" ]]; then
	echo "Error: software installation directory does not exist!"
	exit 1
else
	echo "Software installation directory exists; continuing..."
fi

MODULE_CONTENT=$(cat << EOFMODCONT
#%Module1.0#################################################################
##
## Automatically generated by $0
## On: $(date)
##
## Name:	$REALNAME (subdir: $NAME)
## Version:	$VERSION
## Description:	$DESCRIPTION
##
proc ModulesHelp { } {
	global version modroot
	puts stderr "\t$REALNAME: $DESCRIPTION"
	puts stderr "\n\tVersion: \$version\n"
}

module-whatis	"$DESCRIPTION"

# for Tcl script use only
set	version	$VERSION
set	approot	$SOFT_PREFIX/$NAME/\$version

EOFMODCONT)
echo "Detecting special directories for environment variables:"

function find_dirs {
	ENV_VAR=$1
	shift
	CHECK_DIRS=$*
	echo "* for $ENV_VAR (checking: $CHECK_DIRS):"
	for DIR in $CHECK_DIRS; do
		if [[ -d "$INST_ROOT/$DIR" ]]; then
			echo "	found: $INST_ROOT/$DIR"
			MODULE_CONTENT="$MODULE_CONTENT
prepend-path    $ENV_VAR        \$approot/$DIR"
		fi
	done
}

find_dirs PATH bin bin64
find_dirs LD_LIBRARY_PATH lib lib64
find_dirs INCLUDE include
find_dirs MANPATH man share/man
find_dirs PKG_CONFIG_PATH lib/pkgconfig lib64/pkgconfig
find_dirs INFOPATH share/info


echo "Done detecting special directories for environment variables."
echo ""
echo "Adding extra lines:$ADD"
echo ""
MODULE_CONTENT="$MODULE_CONTENT
$ADD"
echo "Module file:"
echo "$MODULE_CONTENT"


echo ""

if [[ -e "$MOD_LOC" ]]; then
	echo -n "Module file '$MOD_LOC' already exists; overwrite? (y/n) "
	if [[ "$WRITE" == 1 ]]; then
		YN="y"
		echo "y"
	else
		read YN
	fi
else
	echo -n "Module file '$MOD_LOC' does not yet exist; create? (y/n)" 
	if [[ "$WRITE" == 1 ]]; then
		YN="y"
		echo "y"
	else
		read YN
	fi
fi
if [ "$YN" == "y" ]; then
	mkdir -p "$(dirname $MOD_LOC)"
	echo "Writing the file ..."
	echo "$MODULE_CONTENT" > $MOD_LOC
	echo "Done. Exiting."
else
	echo "Not creating module file. Exiting."
fi
