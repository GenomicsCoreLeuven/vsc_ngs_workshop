#!/bin/bash -l
#PBS -l walltime=00:10:00
#PBS -l mem=100gb
#PBS -l nodes=1:ppn=10:ivybridge
#PBS -M noreply@genomicscore.be
#PBS -m aeb
#PBS -N bowtie_mapping
#PBS -A default_project

module use /apps/leuven/thinking/2015a/modules/all 
module load Bowtie2/2.2.4-intel-2015a
module load SAMtools/1.1-intel-2015a

#Here we set some variables, for the processing of the data.
CLONE_DIR="$VSC_DATA";  #This one must be the directory where you performed the git clone
GIT_DIR="$CLONE_DIR/vsc_ngs_workshop";
SAMPLE_DIR="$GIT_DIR/script_and_data/mapping";
SCRATCH_DIR=$VSC_SCRATCH_NODE;
OUTPUT_DIR="$GIT_DIR/results/mapping";

GENOME_DIR="$VSC_SCRATCH/genome/genome";	#This must be the directory where the genome index is (see prolog)

#Here a tmp directory is created, specially for this job
mkdir -p $SCRATCH_DIR;
TMPDIR=$SCRATCH_DIR;
TMP_DIR=`mktemp -d -t tmp.XXXXXXXX`;
cd $TMP_DIR;

#This initiates the copy command. Note that here the $SAMPLE variable is used. This variable comes from the sample data file.
rsync -ahr $SAMPLE_DIR/$SAMPLE*.fastq.gz .;
gunzip *gz;
FASTQ_FILE=$TMP_DIR/$SAMPLE".fastq";

#Do the actual mapping, using bowtie2
bowtie2 -q -p 1 --seed 1 --local --rg-id $SAMPLE --rg ID=$SAMPLE --rg PL=illumina --rg CN=GenomicsCoreLeuven -x $GENOME_DIR $FASTQ_FILE > $TMP_DIR/mapped.sam 2> $TMP_DIR/$SAMPLE.bowtie2.log;

rm *fastq;	#clean the tmp directory: remove the input fastq

#BAM modifications
samtools view -bS $TMP_DIR/mapped.sam > $TMP_DIR/mapped.bam;	#sam file to bam file
rm -r $TMP_DIR/mapped.sam;
samtools sort $TMP_DIR/mapped.bam $TMP_DIR/$SAMPLE.sorted;	#sort bam file according to chromosome position (previous in fastq order)
rm -r $TMP_DIR/mapped.bam;
samtools index -b $TMP_DIR/$SAMPLE.bam;		#index the bam file (used for fast access, like in IGV, or with variant calling)
rm $TMP_DIR/$SAMPLE.sorted.bam;

#copy the data to the output
mkdir -p $OUTPUT_DIR;
cd $OUTPUT_DIR;
rsync -ahr $TMP_DIR/$SAMPLE* .;
rm -rf $TMP_DIR;



